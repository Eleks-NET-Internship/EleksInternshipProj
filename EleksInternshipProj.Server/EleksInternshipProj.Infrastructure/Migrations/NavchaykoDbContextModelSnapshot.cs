// <auto-generated />
using System;
using EleksInternshipProj.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EleksInternshipProj.Infrastructure.Migrations
{
    [DbContext(typeof(NavchaykoDbContext))]
    partial class NavchaykoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.Day", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("day_name");

                    b.Property<long>("TimetableId")
                        .HasColumnType("bigint")
                        .HasColumnName("timetable_id");

                    b.HasKey("Id");

                    b.HasIndex("TimetableId");

                    b.ToTable("day", "public");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsSolo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_solo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<long>("SpaceId")
                        .HasColumnType("bigint")
                        .HasColumnName("space_id");

                    b.HasKey("Id");

                    b.HasIndex("SpaceId");

                    b.ToTable("event", "public");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.EventDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DayId")
                        .HasColumnType("bigint")
                        .HasColumnName("day_id");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint")
                        .HasColumnName("event_id");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("EventId");

                    b.ToTable("event_day", "public");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.EventMarker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("EventId")
                        .HasColumnType("bigint")
                        .HasColumnName("event_id");

                    b.Property<long>("MarkerId")
                        .HasColumnType("bigint")
                        .HasColumnName("marker_id");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MarkerId");

                    b.ToTable("event_marker", "public");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.Marker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<long>("SpaceId")
                        .HasColumnType("bigint")
                        .HasColumnName("space_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("SpaceId");

                    b.ToTable("marker", "public");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.Note", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("content");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint")
                        .HasColumnName("event_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("note", "public");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("role", "public");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.SoloEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("EventId")
                        .HasColumnType("bigint")
                        .HasColumnName("event_id");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("event_time");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("solo_event", "public");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.Space", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("space", "public");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.TaskModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint")
                        .HasColumnName("event_id");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("event_time");

                    b.Property<bool>("IsDeadline")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deadline");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("StatusId");

                    b.ToTable("task", "public");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.TaskStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("taskstatus", "public");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.Timetable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("SpaceId")
                        .HasColumnType("bigint")
                        .HasColumnName("space_id");

                    b.HasKey("Id");

                    b.HasIndex("SpaceId")
                        .IsUnique();

                    b.ToTable("timetable", "public");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AuthProvider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("auth_provider");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("external_id");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_name");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea")
                        .HasColumnName("password_salt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email", "AuthProvider")
                        .IsUnique();

                    b.ToTable("user", "public");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.UserSpace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long>("SpaceId")
                        .HasColumnType("bigint")
                        .HasColumnName("space_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("SpaceId", "UserId")
                        .IsUnique();

                    b.ToTable("user_space", "public");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.Day", b =>
                {
                    b.HasOne("EleksInternshipProj.Domain.Models.Timetable", "Timetable")
                        .WithMany("Days")
                        .HasForeignKey("TimetableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.Event", b =>
                {
                    b.HasOne("EleksInternshipProj.Domain.Models.Space", "Space")
                        .WithMany()
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.EventDay", b =>
                {
                    b.HasOne("EleksInternshipProj.Domain.Models.Day", "Day")
                        .WithMany("EventDays")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EleksInternshipProj.Domain.Models.Event", "Event")
                        .WithMany("EventDays")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.EventMarker", b =>
                {
                    b.HasOne("EleksInternshipProj.Domain.Models.Event", "Event")
                        .WithMany("EventMarkers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EleksInternshipProj.Domain.Models.Marker", "Marker")
                        .WithMany("EventMarkers")
                        .HasForeignKey("MarkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Marker");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.Marker", b =>
                {
                    b.HasOne("EleksInternshipProj.Domain.Models.Space", "Space")
                        .WithMany("Markers")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.Note", b =>
                {
                    b.HasOne("EleksInternshipProj.Domain.Models.Event", "Event")
                        .WithMany("Notes")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.SoloEvent", b =>
                {
                    b.HasOne("EleksInternshipProj.Domain.Models.Event", "Event")
                        .WithMany("SoloEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.TaskModel", b =>
                {
                    b.HasOne("EleksInternshipProj.Domain.Models.Event", "Event")
                        .WithMany("Tasks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EleksInternshipProj.Domain.Models.TaskStatus", "Status")
                        .WithMany("Tasks")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.Timetable", b =>
                {
                    b.HasOne("EleksInternshipProj.Domain.Models.Space", "Space")
                        .WithOne("Timetable")
                        .HasForeignKey("EleksInternshipProj.Domain.Models.Timetable", "SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.UserSpace", b =>
                {
                    b.HasOne("EleksInternshipProj.Domain.Models.Role", "Role")
                        .WithMany("UserSpaces")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EleksInternshipProj.Domain.Models.Space", "Space")
                        .WithMany("UserSpaces")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EleksInternshipProj.Domain.Models.User", "User")
                        .WithMany("UserSpaces")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Space");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.Day", b =>
                {
                    b.Navigation("EventDays");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.Event", b =>
                {
                    b.Navigation("EventDays");

                    b.Navigation("EventMarkers");

                    b.Navigation("Notes");

                    b.Navigation("SoloEvents");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.Marker", b =>
                {
                    b.Navigation("EventMarkers");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.Role", b =>
                {
                    b.Navigation("UserSpaces");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.Space", b =>
                {
                    b.Navigation("Markers");

                    b.Navigation("Timetable")
                        .IsRequired();

                    b.Navigation("UserSpaces");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.TaskStatus", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.Timetable", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("EleksInternshipProj.Domain.Models.User", b =>
                {
                    b.Navigation("UserSpaces");
                });
#pragma warning restore 612, 618
        }
    }
}
